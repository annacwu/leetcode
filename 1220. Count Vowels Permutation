class Solution(object):
    def countVowelPermutation(self, n):
        """
        :type n: int
        :rtype: int
        """
        def countVowelPermutation(self, n: int) -> int:

            # Initialize all vowels counts to 1
            # This is n==1 case
            a, e, i, o, u = 1, 1, 1, 1, 1

            # Iterate from 2 to n
            for _ in range(2, n + 1):
                a, e, i, o, u = e + i + u, a + i, e + o, i, i + o

            # Return the sum of all counts of all vowels
            return (a + e + i + o + u) % 1000000007
            
        '''chatgpt solution'''

        # MOD = 10**9 + 7
    
        # # Create a 2D array to store the counts
        # dp = [[0] * 5 for _ in range(n)]
        
        # # Initialize the counts for strings of length 1
        # for i in range(5):
        #     dp[0][i] = 1
        
        # # Fill in the dp array for strings of length greater than 1
        # for length in range(1, n):
        #     dp[length][0] = dp[length - 1][1]  # 'a' can only be followed by 'e'
        #     dp[length][1] = (dp[length - 1][0] + dp[length - 1][2]) % MOD  # 'e' can be followed by 'a' or 'i'
        #     dp[length][2] = (dp[length - 1][0] + dp[length - 1][1] + dp[length - 1][3] + dp[length - 1][4]) % MOD  # 'i' has various options
        #     dp[length][3] = (dp[length - 1][2] + dp[length - 1][4]) % MOD  # 'o' can be followed by 'i' or 'u'
        #     dp[length][4] = dp[length - 1][0]  # 'u' can only be followed by 'a'
        
        # # Calculate the total count for strings of length 'n'
        # total_count = sum(dp[n - 1]) % MOD
        
        # return total_count

        '''my terrible no good solution'''
        # dp = {'a':['e'], 
        # 'e': ['a', 'i'], 
        # 'i': ['a', 'e', 'o', 'u'], 
        # 'o':['i', 'u'], 
        # 'u': ['a']}

        # possible = ['a', 'e', 'i', 'o', 'u']

        # i = n
        # while i > 0:
        #     for string in possible: 
        #         last = string[-1]
        #         for letter in dp[last]:
        #             new = string[-1] + letter
        #             possible.append(new)
        #     i -= 1

        # count = 0
        # for option in possible: 
        #     if len(option) == n:
        #         count += 1

        # return count
        

        